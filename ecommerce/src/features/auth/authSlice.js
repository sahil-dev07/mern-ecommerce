import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { checkuser, createUser, signOut } from './authAPI';
// import { updateUser } from '../user/userAPI';


const initialState = {
  loggedInUser: null,  // used only for id and role
  status: 'idle',
  error: null,
};


export const createUserAsync = createAsyncThunk(
  'user/createUser',
  async (userdata) => {
    const response = await createUser(userdata);

    return response.data;
  }
);
// already present in userslice

// export const updateUserAsync = createAsyncThunk(
//   'user/updateUser',
//   async (update) => {
//     const response = await updateUser(update);
//     return response.data;
//   }
// );

export const checkUserAsync = createAsyncThunk(
  'user/checkUser',
  async (loginInfo) => {
    const response = await checkuser(loginInfo);

    return response.data;
  }
);

export const signOutAsync = createAsyncThunk(
  'user/signout',
  async (userId) => {
    const response = await signOut(userId);
    return response.data;
  }
);


export const authSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {

      state.value += 1;
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser = action.payload;
      })
      .addCase(checkUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(checkUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser = action.payload;
      })
      .addCase(checkUserAsync.rejected, (state, action) => {
        state.status = 'idle';
        state.error = action.error;
      })
      // .addCase(updateUserAsync.pending, (state) => {
      //   state.status = 'loading';
      // })
      // .addCase(updateUserAsync.fulfilled, (state, action) => {
      //   state.status = 'idle';
      //   state.loggedInUser = action.payload;
      // })
      .addCase(signOutAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(signOutAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser = null;
      })
  },
});

export const { increment } = authSlice.actions;

export const selectLoggedInUser = (state) => state.user.loggedInUser
export const selectError = (state) => state.user.error

export default authSlice.reducer;
